{"version":3,"sources":["components/boostGame/icons sync /^/.//.*$","components/boostGame/baseGame.js","components/boostGame/betting.js","components/parse/context.js","components/parse/parseapi.js","components/boostGame/bars.js","components/boostGame/index.js","App.js","serviceWorker.js","index.js","components/boostGame/icons/bank.svg","components/boostGame/icons/BAT.svg","components/boostGame/icons/Bitcoin.svg","components/boostGame/icons/XRP.svg","components/boostGame/icons/betacoin.png","components/boostGame/icons/betacoin1.svg","components/boostGame/icons/dogecoin.svg","components/boostGame/icons/eos.svg","components/boostGame/icons/ethereum.svg","components/boostGame/icons/isk.png","components/boostGame/icons/litecoin.svg","components/boostGame/icons/monero.svg","components/boostGame/information-dark.svg"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","BoostRocket","Component","constructor","props","super","this","state","lastAngle","render","xMin","xMax","top","testPoints","length","yMax","right","offset","P1","P2","hyp","Math","sqrt","pow","adj","angle","acos","PI","React","createElement","class","style","left","transform","transformOrigin","DefaultRocketSprite","display","flexDirection","alignItems","className","BoostYaxis","height","componentDidMount","document","getElementById","clientHeight","setState","step","currentStep","numberedTicks","push","items","n","elements","totalItems","interval","floor","i","distributedCopy","tickElements","tickHeight","NumberedTick","value","majorTick","reverse","hight","bottom","round","BoostXaxis","width","clientWidth","tickWidth","XaxisTick","BoostPayoutNumber","myPayoutElemnt","crashed","color","wager","currentPayout","parseFloat","toFixed","payout","BoostLine","wagers","lines","x1","y1","x2","y2","stroke-linecap","stroke","strokeWidth","borderRadius","key","wagerElements","x","cashout","y","LineWagerItem","multiplyer","tick","RoundPreStart","textAlign","timeRemaining","elmID","replace","c","r","random","v","toString","hover","onMouseOver","console","log","onMouseOut","_this","onMouseEnter","position","zIndex","src","require","currency","image","BettingPannel","betType","selectBetType","type","currentWager","cancelBet","nextRoundWager","waitingForNextRound","selectedCurrency","selectCurrency","bettingInput","ManualBet","placeManualBet","logMessage","AutoBet","Button","onClick","size","marginRight","paddingTop","flexGrow","overflow","onChange","event","target","name","betAmmount","autoCashout","betPlaced","submitBet","title","betButton","block","betOverlayStyles","backgroundColor","disabled","betWindow","padding","InputGroup","InputGroupAddon","addonType","Input","paddingBottom","PlacedBets","testPlayers","sorted_wagers","sort","a","b","bot","reduce","betChashout","totalBets","onWin","onWinIncrease","onLoss","onLossIncrease","stopAtProfit","stopAtLoss","placeBet","outline","createContext","ParseAPI","Footer","children","HistoryBar","historyElements","payoutHistory","PayoutHistoryElement","Header","MaxProfitIndicator","tooltipOpen","setTooltipOpen","useState","Tooltip","placement","isOpen","toggle","fontSize","coins","WalletDropDown","listOfCoins","dropdownOpen","dropdownToggle","dropDownItems","coin","DropdownItem","fontWeight","marginright","marginLeft","ammount","DropdownToggle","caret","flexWrap","Dropdown","DropdownMenu","header","divider","BoostGameBase","currentTick","lastPayout","roundStart","Date","getTime","timeReaming","autoBetParameter","enabled","baseValue","cashoutValue","stopAtLost","autoBetCounters","wagerSum","notificationCenterMessage","inializeConnection","startGameLoop","addNotificationCenterMessage","messageObject","unshift","dissmissMessage","dismissed","message","getPayoutAtTick","pull_out","cashoutBot","setTimeout","endBoostRound","roundPreperationLoop","submitBotWager","submitWager","t","currenty","myWager","bot_wager","internet","userName","abs","cancelWager","boostGameWindow","Fragment","maxHeight","overflowY","App","BoostGame","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da4aa26a.chunk.js","sourcesContent":["var map = {\n\t\"./BAT.svg\": 414,\n\t\"./Bitcoin.svg\": 415,\n\t\"./XRP.svg\": 416,\n\t\"./bank.svg\": 244,\n\t\"./betacoin.png\": 417,\n\t\"./betacoin1.svg\": 418,\n\t\"./dogecoin.svg\": 419,\n\t\"./eos.svg\": 420,\n\t\"./ethereum.svg\": 421,\n\t\"./isk.png\": 422,\n\t\"./litecoin.svg\": 423,\n\t\"./monero.svg\": 424\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 154;","import React, { Component } from 'react';\nimport './index.css';\nimport './xaxis.css';\n\nexport class BoostRocket extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastAngle: 0,\n        };\n    }\n    render() {\n        var { xMin, xMax } = this.props;\n        //  first we need to find out where to place the rocket\n        if (xMax < xMin) {\n            xMax = xMin;\n        }\n\n        //  to get the top and angle we need the last line\n        let top = 0;\n        top = this.props.testPoints[this.props.testPoints.length - 1][1];\n        top = (1 - top / this.props.yMax) * 100 + '%';\n\n        //  lets calculate the right value\n        let right = 0; // = \"-32px\";\n        right =\n            this.props.testPoints[this.props.testPoints.length - 1][0] / 1000;\n        right = 'calc( ' + ((right / xMax) * 200 - 100) + '% - 32px )';\n        //console.log(  right)\n\n        //  now we have to figure out the angle\n        //  we have the hyp and now need to\n\n        //  so smooth out the animation\n        let offset = 0;\n        if (this.props.testPoints.length > 22) {\n            offset = this.props.testPoints.length - 22;\n        }\n        let P1 = this.props.testPoints[this.props.testPoints.length - 2];\n\n        let P2 = this.props.testPoints[this.props.testPoints.length - 1];\n        let hyp = Math.sqrt(\n            Math.pow(P1[0] / 1000 - P2[0] / 1000, 2) +\n                Math.pow(P1[1] - P2[1], 2)\n        );\n        let adj = P2[1] - P1[1];\n        let angle = Math.acos(adj / hyp) * (180 / Math.PI);\n        angle = angle;\n        //console.log(adj, hyp, angle, P1, P2)\n\n        return (\n            <div class=\"boost-rocket-wrapper\">\n                <div\n                    class=\"boost-rocket-sprite\"\n                    style={{\n                        left: right,\n                        top: top,\n                        transform: 'rotate(70deg)',\n\n                        transformOrigin: 'center top ',\n                    }}\n                >\n                    <DefaultRocketSprite />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function DefaultRocketSprite(props) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            }}\n        >\n            <div className=\"rocket-sprite\" />\n            <div className=\"rocket-sprite-flames\">\n                <div class=\"fire\">\n                    <div class=\"flame\"></div>\n                    <div class=\"flame\"></div>\n                    <div class=\"flame\"></div>\n                    <div class=\"flame\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                    <div class=\"spark\"></div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport class BoostYaxis extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: 0,\n            offset: 15, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById('y-axis').clientHeight;\n        this.setState({ height });\n    }\n    render() {\n        const { height, offset } = this.state;\n\n        var { yMax, step } = this.props;\n        //console.log(this.props)\n        yMax++;\n        let currentStep = 1 + step;\n        let numberedTicks = [1];\n        while (currentStep <= (yMax + step) * 2) {\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + step;\n        }\n\n        numberedTicks = distributedCopy(numberedTicks, 50);\n        //  now lets build all the delimiter steps\n        let tickElements = []; //<NumberedTick value={1} majorTick={true} height={18}  />];\n        let majorTick = false; // flag that gets changed so we know if it should\n        //  be a major more minor one\n        for (let i = 0; i < numberedTicks.length; i++) {\n            //  get the height percentage\n            let tickHeight =\n                ((numberedTicks[i] - 1) / (yMax - 1)) * (height - offset) +\n                offset;\n\n            //  get an inrment constant\n            let incriment =\n                (1 / (numberedTicks.length * 4)) * (height - offset);\n\n            // each loop we need to add 3 ticks\n            // for(let j=0;j<3;j++){\n            //     let hight = tickHeight + (incriment * j) +12\n            //     tickElements.push(<RegularTick height={hight} />);\n            // }\n\n            // then we can create the numbered tick\n            tickElements.push(\n                <NumberedTick\n                    value={numberedTicks[i]}\n                    majorTick={majorTick}\n                    height={tickHeight}\n                />\n            );\n            //then we change the flag\n            //console.log(\"height for : \",numberedTicks[i], tickHeight)\n        }\n        tickElements = tickElements.reverse();\n        return (\n            <div className=\"y-axis-element\">\n                <div class=\"boost-yaxis-wrapper\">{tickElements}</div>\n            </div>\n        );\n    }\n}\nfunction NumberedTick(props) {\n    let hight = props.height + 7;\n    return (\n        <div class=\"yaxis-tick-wrapper\" style={{ bottom: hight + 'px' }}>\n            <div class=\"yaxis-tick-large\"></div>\n            {Math.round(props.value * 100) / 100}\n        </div>\n    );\n}\nfunction RegularTick(props) {\n    let hight = props.height; //- 2\n    return (\n        <div\n            id=\"y-axis\"\n            class=\"yaxis-tick-wrapper\"\n            style={{ bottom: hight + 'px' }}\n        >\n            <div class=\"yaxis-tick\"></div>\n        </div>\n    );\n}\n\nexport class BoostXaxis extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 0,\n            offset: 0, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const width = document.getElementById('x-axis').clientWidth;\n        this.setState({ width });\n    }\n    render() {\n        var { xMax } = this.props;\n        const { width, offset } = this.state;\n        let currentStep = 2;\n        let numberedTicks = [2];\n        while (currentStep <= xMax + 2) {\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + 2;\n        }\n\n        let tickElements = [];\n        for (let i = 0; i < numberedTicks.length; i++) {\n            let tickWidth =\n                ((numberedTicks[i] - 1) / (xMax - 1)) * (width - offset) +\n                offset;\n            tickElements.push(\n                <XaxisTick value={numberedTicks[i]} left={tickWidth} />\n            );\n        }\n\n        return (\n            <div id=\"x-axis\" className=\"x-axis-element\">\n                <div className=\"boost-x-axis\">{tickElements}</div>\n            </div>\n        );\n    }\n}\nfunction XaxisTick(props) {\n    return (\n        <div class=\"xaxis-tick-wrapper\" style={{ left: props.left + 'px' }}>\n            <div class=\"xaxis-tick\"></div>\n            <div>{props.value}s</div>\n        </div>\n    );\n}\n\nexport class BoostPayoutNumber extends Component {\n    render() {\n        let style = {};\n        if (this.props.crashed) {\n            style.color = 'red';\n        }\n        let myPayoutElemnt;\n        if (this.props.wager.value) {\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + $\n                    {(\n                        this.props.currentPayout *\n                        parseFloat(this.props.wager.value)\n                    ).toFixed(2)}\n                </div>\n            );\n        }\n        if (this.props.wager.payout) {\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + $\n                    {(\n                        parseFloat(this.props.wager.payout) *\n                        parseFloat(this.props.wager.value)\n                    ).toFixed(2)}\n                </div>\n            );\n        } else {\n            if (this.props.crashed && this.props.wager.value) {\n                myPayoutElemnt = (\n                    <div class=\"boost-payout-currency-value\" style={style}>\n                        - ${parseFloat(this.props.wager.value).toFixed(2)}\n                    </div>\n                );\n            }\n        }\n        return (\n            <div className=\"boost-payout-number-wrapper\">\n                <div className=\"boots-payout-display\" style={style}>\n                    <div className=\"boost-payout-number\">\n                        {this.props.currentPayout.toFixed(2)}x\n                    </div>\n                    <div className=\"boost-payout-subtitle\">Current Payout</div>\n                    {myPayoutElemnt}\n                </div>\n            </div>\n        );\n    }\n}\n\n//  creates the svg line\nexport class BoostLine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        var { testPoints, xMax, xMin, wagers } = this.props;\n        if (xMax < xMin) {\n            xMax = xMin;\n        }\n        //  create all the lines based on where they should be\n        let lines = [];\n        for (let i = 1; i < testPoints.length; i++) {\n            //  starting point\n            let x1 = (testPoints[i - 1][0] / 1000 / xMax) * 100 - 0.02 + '%';\n            let y1 =\n                (1 - testPoints[i - 1][1] / this.props.yMax) * 100 - 0.02 + '%';\n\n            //  ending point\n            let x2 = (testPoints[i][0] / 1000 / xMax) * 100 + 0.02 + '%';\n            let y2 =\n                (1 - testPoints[i][1] / this.props.yMax) * 100 + 0.02 + '%';\n            //console.log(x2,y2)\n            lines.push(\n                <line\n                    stroke-linecap=\"round\"\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    style={{\n                        stroke: 'rgb(255,255,255,0.3)',\n                        strokeWidth: '5',\n                        borderRadius: '3px',\n                    }}\n                    key={'line-segment-' + i}\n                />\n            );\n        }\n\n        //  now lets make the elements for all the wagers\n        let wagerElements = [];\n        for (let wager of wagers) {\n            if (wager.payout) {\n                //  caculate the middle point for the\n                //  placement of the wager element\n\n                let x = (wager.cashout / 1000 / xMax) * 100 - 0.02 + '%';\n                let y = ((wager.payout - 1) / this.props.yMax) * 100 + '%';\n\n                wagerElements.push(\n                    <LineWagerItem\n                        bottom={y}\n                        left={x}\n                        multiplyer={wager.payout}\n                        tick={wager.cashout}\n                        value={wager.value}\n                        wager={wager}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div class=\"boost-line-wrapper\">\n                <div class=\"boost-line-inner-wrapper\">\n                    <div className=\"boost-line-svg-wrapper\">\n                        <svg class=\"boost-line-svg\">{lines}</svg>\n                    </div>\n                    <div className=\"boost-line-wager-wrapper\">\n                        <div className=\"boost-line-wager\">{wagerElements}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function RoundPreStart(props) {\n    return (\n        <div className=\"pre-round-wrapper\">\n            <div\n                style={{\n                    display: 'flex',\n                }}\n            >\n                <DefaultRocketSprite />\n                <div style={{ textAlign: 'center' }}>\n                    <div className=\"pre-round-title\">Perparing Round</div>\n                    <div className=\"pre-round-round-down\">\n                        Starting In <span>{props.timeRemaining}s</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nclass LineWagerItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: 0,\n            width: 0,\n            elmID: uuidv4() + '-wager-placement',\n            hover: false,\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById(this.state.elmID).clientHeight;\n\n        const width = document.getElementById(this.state.elmID).clientWidth;\n        this.setState({ height, width });\n    }\n    onMouseOver() {\n        console.log('mouse over');\n        this.setState({\n            hover: true,\n        });\n    }\n    onMouseOut() {\n        console.log('mouse out');\n        this.setState({\n            hover: false,\n        });\n    }\n    render() {\n        var _this = this;\n        const { elmID, height, width } = this.state;\n        const { bottom, left, wager } = this.props;\n\n        return (\n            <div\n                onMouseEnter={() => {\n                    _this.onMouseOver();\n                }}\n                id={elmID}\n                style={{\n                    position: 'absolute',\n                    bottom: 'calc( ' + bottom + ' - ' + height / 2 + 'px )',\n                    left: 'calc( ' + left + ' - ' + width / 2 + 'px )',\n                    zIndex: 10000,\n                }}\n            >\n                <img\n                    src={require('./icons/' + wager.currency.image)}\n                    style={{ height: '1.5rem', width: '1.5rem' }}\n                />\n            </div>\n        );\n    }\n}\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n        /[xy]/g,\n        function (c) {\n            var r = (Math.random() * 16) | 0,\n                v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        }\n    );\n}\n\nfunction distributedCopy(items, n) {\n    var elements = [items[0]];\n    var totalItems = items.length - 2;\n    var interval = Math.floor(totalItems / (n - 2));\n    for (var i = 1; i < n - 1; i++) {\n        elements.push(items[i * interval]);\n    }\n    elements.push(items[items.length - 1]);\n    return elements;\n}\n","import React, { Component } from 'react';\nimport './betting.css';\nimport {\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupButtonDropdown,\n    Input,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from 'reactstrap';\n\nexport class BettingPannel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            betType: 'manual',\n        };\n    }\n    selectBetType(type) {\n        this.setState({\n            betType: type,\n        });\n    }\n    render() {\n        var _this = this;\n        const { betType } = this.state;\n        const {\n            currentWager,\n            cancelBet,\n            nextRoundWager,\n            waitingForNextRound,\n            crashed,\n            selectedCurrency,\n            selectCurrency,\n        } = this.props;\n\n        let bettingInput = (\n            <ManualBet\n                placeManualBet={this.props.placeManualBet}\n                cashout={this.props.cashout}\n                wagers={this.props.wagers}\n                currentPayout={this.props.currentPayout}\n                currentWager={currentWager}\n                nextRoundWager={nextRoundWager}\n                waitingForNextRound={waitingForNextRound}\n                crashed={crashed}\n                cancelBet={cancelBet}\n                selectedCurrency={selectedCurrency}\n                logMessage={this.props.logMessage}\n            />\n        );\n        if (betType == 'auto') {\n            bettingInput = <AutoBet />;\n        }\n\n        return (\n            <div className=\"betting-pannel-wrapper\">\n                <div className=\"bet-type-selector\">\n                    <Button\n                        onClick={() => {\n                            _this.selectBetType('manual');\n                        }}\n                        color=\"primary\"\n                        size=\"sm\"\n                        style={{ marginRight: '0.25rem' }}\n                    >\n                        Manual\n                    </Button>{' '}\n                    <Button\n                        onClick={() => {\n                            _this.selectBetType('auto');\n                        }}\n                        color=\"primary\"\n                        size=\"sm\"\n                    >\n                        Auto-bet\n                    </Button>{' '}\n                </div>\n                <div\n                    style={{\n                        paddingTop: '0rem',\n                        flexGrow: '1',\n                        height: '100%',\n                        overflow: 'hidden',\n                    }}\n                >\n                    {bettingInput}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ManualBet extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            betAmmount: 0,\n            autoCashout: 0,\n            betPlaced: false,\n        };\n    }\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    submitBet() {\n        this.props.logMessage({ title: 'Wager Submitted' });\n        const { betAmmount, autoCashout } = this.state;\n        console.log(this.state);\n        console.log('submitting wager');\n        this.props.placeManualBet(betAmmount, autoCashout);\n\n        this.setState({\n            betPlaced: true,\n        });\n    }\n    cashout() {\n        this.props.logMessage({ title: 'Wager Cashed Out' });\n        this.props.cashout();\n    }\n    cancelBet() {\n        this.props.logMessage({ title: 'Bet Canceled' });\n        this.props.cancelBet();\n    }\n    render() {\n        //console.log(this.state)\n        const { betAmmount, autoCashout, betPlaced } = this.state;\n        const {\n            currentPayout,\n            currentWager,\n            nextRoundWager,\n            waitingForNextRound,\n            crashed,\n            selectCurrency,\n            selectedCurrency,\n        } = this.props;\n        //console.log(\"wager states :\",currentWager, nextRoundWager)\n        var _this = this;\n        //  if we have cashouted then we just clear us\n\n        //  make the button here\n        let betButton = (\n            <Button\n                color=\"primary\"\n                size=\"sm\"\n                block\n                onClick={() => {\n                    _this.submitBet();\n                }}\n            >\n                Place Bet\n            </Button>\n        );\n\n        //  we also need to make a few style things here\n        let betOverlayStyles = {\n            position: ' absolute',\n            backgroundColor: 'rgb(0,0,0,0.5)',\n            top: 0,\n            zIndex: 95,\n        };\n\n        //  if we are before the intersage and you\n        //  have no but then you can cancel it\n        if (\n            nextRoundWager.value &&\n            (!currentWager.value || (currentWager.payout && currentWager.value))\n        ) {\n            betButton = (\n                <Button\n                    color=\"primary\"\n                    size=\"sm\"\n                    block\n                    onClick={() => {\n                        _this.cancelBet();\n                    }}\n                >\n                    Cancel Bet\n                </Button>\n            );\n            betOverlayStyles.height = '100%';\n            betOverlayStyles.width = '100%';\n        }\n\n        if (currentWager.value && !currentWager.payout) {\n            betButton = (\n                <Button\n                    color=\"primary\"\n                    size=\"sm\"\n                    block\n                    onClick={() => {\n                        _this.cashout();\n                    }}\n                >\n                    Cashout\n                </Button>\n            );\n            betOverlayStyles.height = '100%';\n            betOverlayStyles.width = '100%';\n        }\n        if (currentWager.value && waitingForNextRound) {\n            betButton = (\n                <Button color=\"primary\" size=\"sm\" block disabled>\n                    Waiting For Round...\n                </Button>\n            );\n            betOverlayStyles.height = '100%';\n            betOverlayStyles.width = '100%';\n        }\n\n        //  the place bet window\n        let betWindow = (\n            <div style={{ padding: '0.5rem' }}>\n                <div style={{ position: 'relative' }}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\">\n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                            name=\"betAmmount\"\n                            value={betAmmount}\n                            onChange={this.onChange}\n                        />\n\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>1/2</Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>x2</Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>Max</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                    <div>Auto Cashout</div>\n                    <InputGroup size=\"sm\" style={{ paddingBottom: '1rem' }}>\n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                            name=\"autoCashout\"\n                            value={autoCashout}\n                            onChange={this.onChange}\n                        />\n\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>X</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n\n                    <div style={betOverlayStyles}></div>\n                </div>\n                <div>{betButton}</div>\n            </div>\n        );\n\n        //  here the round is going and we can cashout our bet\n        //  if the the player has placed a bet give them a button to pull out\n        //  with\n        // if(betPlaced){\n        //     betWindow = (\n        //         <div style={{padding:\"0.5rem\"}}>\n        //             <div>CashOut Ammount</div>\n        //             <div>\n        //                 $ {currentPayout * betAmmount }\n        //             </div>\n        //             <Button color=\"primary\" size=\"sm\" block\n        //                 onClick={()=>{\n        //                     _this.cashout()\n        //                 }}\n        //             >Cashout</Button>\n        //         </div>\n        //     )\n        // }\n\n        return (\n            <div class=\"manual-bet-pannel\">\n                {betWindow}\n                <div\n                    style={{ flexGrow: 1, height: '100%', overflow: 'hidden' }}\n                >\n                    <PlacedBets wagers={this.props.wagers} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass PlacedBets extends Component {\n    render() {\n        const { wagers } = this.props;\n\n        let testPlayers = [];\n        const sorted_wagers = wagers.sort((a, b) => a.bot - b.bot);\n        for (let wager of sorted_wagers) {\n            //  lets do some calulations for each item\n            let value = wager.value;\n            let payout = '';\n\n            if (wager.payout) {\n                value = (\n                    parseFloat(wager.payout) * parseFloat(wager.value)\n                ).toFixed(2);\n                payout = 'x' + wager.payout;\n            }\n\n            testPlayers.push(\n                <div className=\"session-wager-list-item\">\n                    <div className=\"session-wager-player-status\"></div>\n                    <div className=\"session-wager-player-name\">\n                        {wager.name}\n                    </div>\n                    <div className=\"session-wager-player-delta\">{payout}</div>\n                    <div className=\"session-wager-player-ammount\">${value}</div>\n                    <div className=\"session-wager-player-currency\"></div>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"betting-session-wagers\">\n                <div className=\"session-wagers-header\">\n                    <div className=\"session-wagers-players\">\n                        {sorted_wagers.length} players\n                    </div>\n                    <div className=\"session-wagers-total\">\n                        $\n                        {sorted_wagers.length > 0\n                            ? sorted_wagers\n                                  .map((a) => parseFloat(a.value))\n                                  .reduce((a, b) => a + b)\n                            : 0}\n                    </div>\n                </div>\n\n                <div className=\"session-wager-list\">{testPlayers}</div>\n            </div>\n        );\n    }\n}\n\nclass AutoBet extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            betAmmount: 0,\n            betChashout: 0,\n            totalBets: 0,\n            onWin: 0,\n            onWinIncrease: true,\n            onLoss: 0,\n            onLossIncrease: true,\n            stopAtProfit: 0,\n            stopAtLoss: 0,\n        };\n    }\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    placeBet() {}\n    cancelBet() {}\n    render() {\n        const {\n            betAmmount,\n            betChashout,\n            totalBets,\n            onWin,\n            onWinIncrease,\n            onLoss,\n            onLossIncrease,\n            stopAtProfit,\n            stopAtLoss,\n        } = this.state;\n        var _this = this;\n        return (\n            <div className=\"auto-bet-pannel\">\n                <div style={{ padding: '0.5rem' }}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\" style={{ paddingBottom: '0.5rem' }}>\n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                            name=\"betAmmount\"\n                            value={betAmmount}\n                            onChange={this.onChange}\n                        />\n\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>1/2</Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>x2</Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\">\n                            <Button>Max</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                </div>\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{ marginRight: '0.5rem' }}>\n                        <div>Bet Cashout</div>\n                        <InputGroup\n                            size=\"sm\"\n                            style={{ paddingBottom: '0.5rem' }}\n                        >\n                            <InputGroupAddon addonType=\"prepend\">\n                                $\n                            </InputGroupAddon>\n                            <Input\n                                name=\"betChashout\"\n                                value={betChashout}\n                                onChange={this.onChange}\n                            />\n                        </InputGroup>\n                    </div>\n                    <div className=\"bet-col\">\n                        <div>Total Bets</div>\n                        <InputGroup\n                            size=\"sm\"\n                            style={{ paddingBottom: '0.5rem' }}\n                        >\n                            <InputGroupAddon addonType=\"prepend\">\n                                #\n                            </InputGroupAddon>\n                            <Input\n                                name=\"totalBets\"\n                                value={totalBets}\n                                onChange={this.onChange}\n                            />\n                        </InputGroup>\n                    </div>\n                </div>\n\n                <div style={{ padding: '0.5rem' }}>\n                    <div>On Win</div>\n                    <InputGroup size=\"sm\" style={{ paddingBottom: '0.5rem' }}>\n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input\n                            name=\"onWin\"\n                            value={onWin}\n                            onChange={this.onChange}\n                        />\n\n                        <InputGroupAddon\n                            addonType=\"append\"\n                            onClick={() => {\n                                _this.setState({\n                                    onWinIncrease: true,\n                                });\n                            }}\n                        >\n                            <Button outline={!onWinIncrease}>Increase</Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon\n                            onClick={() => {\n                                _this.setState({\n                                    onWinIncrease: false,\n                                });\n                            }}\n                            addonType=\"append\"\n                        >\n                            <Button outline={onWinIncrease}>Reset</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div style={{ padding: '0.5rem' }}>\n                    <div>On Loss</div>\n                    <InputGroup size=\"sm\" style={{ paddingBottom: '0.5rem' }}>\n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input\n                            name=\"onLoss\"\n                            value={onLoss}\n                            onChange={this.onChange}\n                        />\n\n                        <InputGroupAddon\n                            onClick={() => {\n                                _this.setState({\n                                    onLossIncrease: true,\n                                });\n                            }}\n                            addonType=\"append\"\n                        >\n                            <Button outline={!onLossIncrease}>Increase </Button>\n                        </InputGroupAddon>\n                        <InputGroupAddon\n                            onClick={() => {\n                                _this.setState({\n                                    onLossIncrease: false,\n                                });\n                            }}\n                            addonType=\"append\"\n                        >\n                            <Button outline={onLossIncrease}>Reset</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{ marginRight: '0.5rem' }}>\n                        <div>Stop At Profit</div>\n                        <InputGroup\n                            size=\"sm\"\n                            style={{ paddingBottom: '0.5rem' }}\n                        >\n                            <InputGroupAddon addonType=\"prepend\">\n                                $\n                            </InputGroupAddon>\n                            <Input\n                                name=\"stopAtProfit\"\n                                value={stopAtProfit}\n                                onChange={this.onChange}\n                            />\n                        </InputGroup>\n                    </div>\n                    <div className=\"bet-col\">\n                        <div>Stop At Loss</div>\n                        <InputGroup\n                            size=\"sm\"\n                            style={{ paddingBottom: '0.5rem' }}\n                        >\n                            <InputGroupAddon addonType=\"prepend\">\n                                #\n                            </InputGroupAddon>\n                            <Input\n                                name=\"stopAtLoss\"\n                                value={stopAtLoss}\n                                onChange={this.onChange}\n                            />\n                        </InputGroup>\n                    </div>\n                </div>\n                <div style={{ padding: '0.5rem' }}>\n                    <Button color=\"primary\" size=\"sm\" block>\n                        Place Bet\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nconst ParseContext = React.createContext(null);\n\n\nexport const withParse = Component => props => (\n  <ParseContext.Consumer>\n    {parse => <Component {...props} parse={parse} />}\n  </ParseContext.Consumer>\n);\n\nexport default ParseContext;\n","import { coinList } from '../../constants/coins';\n\n\n\nclass ParseAPI {\n  constructor() {\n    this.parse = require('parse');\n    //  this is the connected\n    this.parse.initialize(\"backend\");\n    this.parse.serverURL = 'https://api.logicx.ca'\n    //  this is where we can inisialize some of ther services \n\n    //  add the authchage function \n    this.parse.onAuthChangeListeners = [];\n    var _this =  this;\n    this.parse.onAuthChange = function(listener){\n      console.log(\"adding event listners\")\n      _this.parse.onAuthChangeListeners.push(listener);\n    }\n    this.parse.triggerOnAuthChange = function(){\n\n      var user = _this.parse.User.current()\n      _this.parse.onAuthChangeListeners.forEach((elm)=>{\n        elm(user);\n      })\n    }\n\n    \n\n  }\n  // down here is where we create function that will wrap around the parse api thing \n  async loginUser(email,password){\n    console.log(\"ASDASDASD\")\n    try{\n      \n      const user = await this.parse.User.logIn(email, password);\n      console.log(\"loggedinb\")\n      this.parse.triggerOnAuthChange(user);\n    }catch(error){\n      console.log(error)\n      throw error\n    }\n      \n  }\n\n  async createNewUser(username,email,password){\n    \n    //  make a new user \n    var user = new this.parse.User();\n    user.set(\"username\", email);\n    user.set(\"email\", email)\n    user.set(\"password\", password);\n    //  create a new public profile with the username\n    //  new account image \n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile();\n    publicProfile.set('username',username);\n    //  give them a random profile pic\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    user.set(\"publicProfile\",publicProfile)\n    \n\n    //  create a private profile that only the user can see \n    //  for things relating to thier account \n    var PrivateProfile = this.parse.Object.extend(\"privateProfile\");\n    var privateProfile = new PrivateProfile();\n\n\n    //  set up all of the feilds for the user (TODO MOVE TO CLOUD CODE)\n    privateProfile.set(\"displayTotalWagers\", true);\n    privateProfile.set(\"displayAmmountWagered\", true);\n    privateProfile.set(\"maskSensitiveInformation\", false);\n    privateProfile.set(\"incognitoMode\", false);\n\n    privateProfile.set(\"name\", null);\n    privateProfile.set(\"dob\", new Date());  //  set dob to now\n    privateProfile.set(\"country\", \"\");\n\n    user.set(\"privateProfile\",privateProfile)\n    //  create the wallet for the user with all the currency from \n    //  coins / copnfig with a bunch of BAT for testing (MOVE TO COULD CODE)\n    var UserWallet = this.parse.Object.extend(\"userWallet\");\n    var userWallet = new UserWallet();\n    \n    //  sets all the coins in the app from the constants \n    for(let coin of coinList){\n      //  \n      userWallet.set(coin.name,0.0);\n    }\n\n    user.set(\"userWallet\",userWallet);\n    //  sign up the user \n    await user.signUp();\n    //  set public read access on the public profile and the user \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n    \n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    privateProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await privateProfile.save();\n\n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    userWallet.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await userWallet.save();\n\n    //  done createing a new user trigger an auth change \n    this.parse.triggerOnAuthChange(user);\n    return \n    \n  }\n\n  \n\n  async createNewAnonUser(){\n    console.log(\"created anno user\");\n    //  so make a new new user name for this person \n    var username = \"anon_\" + makeid(7);\n    \n    //  generate a random passowrd \n    var password = makeid(64) + \"Q\";\n    //  sign them up \n    var user = new this.parse.User();\n    user.set(\"username\", username);\n    user.set(\"password\", password);\n    //user.set(\"profilePicture\", \"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString())\n    //  make a public profile for the user so they can \n    //  have some data that is saved with all the chat stuff\n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile()\n    publicProfile.set('username',username);\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    // other fields can be set just like with Parse.Object\n    user.set(\"publicProfile\",publicProfile)\n    \n    \n    await user.signUp();\n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n\n    var user = this.parse.User.current();\n    var userAcl = new this.parse.ACL(user)\n    user.setACL(userAcl);\n\n\n    //  after we need to do the private data thing and \n    //  it will hold all of the virual \"items\" your \n    //  account holds (move this to the after user create trigger )\n    //  so that the user does not have access to this part \n    var Inventory = this.parse.Object.extend(\"Inventory\");\n    var inventory = new Inventory();\n    inventory.setACL(new this.parse.ACL(this.parse.User.current()));\n    \n    //  set the ammount of coins the account has \n    inventory.set(\"coins\", 0);\n\n    this.parse.User.current().set(\"inventory\", inventory);\n\n   \n    \n    \n    this.parse.triggerOnAuthChange();\n    \n  }\n\n  \n\n  //  this function will call its own parse thing \n  //  and say it wants to remove its session \n  async signOutCurrentUser(){\n    await this.parse.User.logOut();\n    this.parse.triggerOnAuthChange();\n  }\n    \n  \n  \n}\nfunction makeid(length) {\n  var result           = '';\n  var characters       = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\nexport default ParseAPI;","import React, { Component,useState } from 'react';\nimport { withParse } from '../parse';\nimport { Dropdown,Tooltip, DropdownToggle, DropdownMenu, DropdownItem, Alert } from 'reactstrap';\nimport './sessionHistory.css';\nimport './header.css';\nimport './notificationcenter.css'\nimport { coinList } from '../../constants/coins';\n\n\n\nexport function Footer(props){\n    return (\n    <div className=\"boost-footer\" >\n        <div className=\"footer-icon-wrapper\" >\n            <div  className=\"game-fullscreen-button\" />\n        </div>\n        <div className=\"footer-icon-wrapper\" >\n            <div className=\"game-expand-button\" />\n        </div>\n        {props.children}\n        <div className=\"footer-disapear\" />\n            \n    </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\nexport function HistoryBar(props){\n    let historyElements = [];\n    for(let payout of props.payoutHistory){\n        historyElements.push(\n            <PayoutHistoryElement\n                value={payout}\n            />\n        )\n    }\n    return (\n    <div  className=\"session-history-wrapper\">\n        {historyElements}\n    </div>\n    )\n}\n\n\nfunction PayoutHistoryElement(props){\n    return(<div className=\"payout-history-element\" >{props.value}x</div>)\n} \n\n\n\n\nexport function Header(props){\n    //console.log(props)\n    return (\n    <div className=\"boost-header\">\n        <div className=\"header-icon\" >\n\n        </div>\n        <div className=\"boost-header-title\" >\n            Boost\n        </div>\n        <div className=\"boost-header-maxpayout\" >\n            < MaxProfitIndicator />\n            {props.children}\n        </div>\n    </div>\n    )\n\n}\n\nconst MaxProfitIndicator = (props) => {\n    const [tooltipOpen, setTooltipOpen] = useState(false);\n  \n    const toggle = () => setTooltipOpen(!tooltipOpen);\n  \n    return (\n      <div >\n        <div id=\"TooltipExample\" className=\"boost-header-maxpayout\">Max Profit < div className=\"boost-header-maxpayout-icon\" /></div>\n        <Tooltip placement=\"left\" isOpen={tooltipOpen} target=\"TooltipExample\" toggle={toggle}>\n            <div style={{\n                fontSize : \"0.75rem\",\n                color : \"rgb(255,255,255,0.5)\"\n            }}>\n                $7000 max Profit\n            </div>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  export const coins = [\n    {\n        \"name\" : \"BTC\",\n        \"image\" : \"Bitcoin.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"BAT\",\n        \"image\" : \"BAT.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"DOGE\",\n        \"image\" : \"dogecoin.svg\",\n        \"ammount\" : 22.32\n    },\n    {\n        \"name\" : \"EOS\",\n        \"image\" : \"eos.svg\",\n        \"ammount\" : 45.32\n    },\n    {\n        \"name\" : \"ETH\",\n        \"image\" : \"ethereum.svg\",\n        \"ammount\" : 45.32\n    },\n    {\n        \"name\" : \"LTC\",\n        \"image\" : \"litecoin.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"XMR\",\n        \"image\" : \"monero.svg\",\n        \"ammount\" : 3.32\n    },\n    {\n        \"name\" : \"XRP\",\n        \"image\" : \"XRP.svg\",\n        \"ammount\" : 1.32\n    },{\n        \"name\" : \"BETA\",\n        \"image\" : \"betacoin.png\",\n        \"ammount\" : 432.34\n    }]\nexport class WalletDropDown extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            listOfCoins : props.coins\n\n            \n        }\n    }\n    \n    render(){\n        const {selectedCurrency, selectCurrency} = this.props;\n        var _this = this;\n        const { listOfCoins, dropdownOpen, } = this.state;\n        let dropDownItems = []\n        let dropdownToggle;\n        for(let coin of listOfCoins){\n            dropDownItems.push(\n                <DropdownItem  color=\"primary\" size=\"sm\"\n                    style={{display:\"flex\", width : \"100%\",fontWeight:500,alignItems: \"center\", fontSize : \"0.9rem\"}}\n                    onClick={()=>{\n                        selectCurrency( coin)\n                    }}\n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.8rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                </DropdownItem>\n            )\n            if(coin.name == selectedCurrency.name){\n                dropdownToggle = (\n                    <DropdownToggle caret style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\", fontWeight: 600}}\n                    \n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.9rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                    </DropdownToggle>\n                )\n            }\n        }\n\n        return (\n        \n            <Dropdown isOpen={dropdownOpen} size=\"sm\" toggle={()=>{\n                _this.setState({\n                    dropdownOpen : !dropdownOpen\n                })\n            }}>\n                {dropdownToggle}\n                <DropdownMenu right>\n                <DropdownItem header>Wallet</DropdownItem>\n                    {dropDownItems}\n                    <DropdownItem divider />\n                    <DropdownItem\n                    style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\"}}\n                    >\n                    <img \n                        src={require(\"./icons/bank.svg\")}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                        My Account    \n                    </DropdownItem>\n                </DropdownMenu>\n            </Dropdown>\n        \n        )\n    }\n}\n\nexport class NotificationCenter extends Component {\n    constructor(props){\n        super(props);\n         //console.log(props)\n\n    }\n     \n    \n    \n    render(){\n        //  we can loop throug the props \n\n        const {messages} = this.props;\n        var messageList = [];\n       \n        for(let message of this.props.messages){\n            //  \n            \n            if(!message.message.dismissed){\n                messageList.push(<NotificationCenterMessage\n                //key={}\n                    messageBody={message.message.title}\n                    dismissTimer={3000}\n                    close={()=>{\n                        //  so the message can close it self\n                        //  and have a clise button that will \n                        //  dismiss it \n                        message.dissmissMessage()\n                    }}  \n                    //  the childern ar the calls to actions\n    \n                >\n    \n    \n                </NotificationCenterMessage>)\n            }\n            \n        }\n        return (\n            <div className=\"notification-center-wrapper\">\n               <div className=\"notification-center-message-list\">\n                    {messageList}\n                </div> \n            </div>\n        )\n    }\n}\n\nconst NotificationCenterMessage = (props)=>{\n\n    //  with all the props we can do some cool ass things \n    if(props.dismissTimer){\n        setTimeout(()=>{\n            //  close the message\n            props.close();\n        },props.dismissTimer);\n    }\n   \n    \n    \n    return (<Alert \n        size=\"sm\"\n                color=\"secondary\" \n                isOpen={true}>\n                <img \n                    src = {require(\"./information-dark.svg\")}\n                    style={{\n                        height: \"0.75rem\",\n                        width : \"0.75rem\",\n                        marginRight : \"0.5rem\"\n                    }}\n                />{props.messageBody}\n            </Alert>)\n}","import React, { Component } from 'react';\nimport './index.css';\nimport {\n    BoostLine,\n    BoostRocket,\n    BoostPayoutNumber,\n    DefaultRocketSprite,\n    BoostXaxis,\n    BoostYaxis,\n    RoundPreStart,\n} from './baseGame';\nimport { BettingPannel } from './betting';\nimport {\n    Header,\n    HistoryBar,\n    Footer,\n    WalletDropDown,\n    NotificationCenter,\n    coins,\n} from './bars';\nimport { internet } from 'faker';\n\nclass BoostGameBase extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xMax: 6, // time in seconds of the x axies\n            xMin: 2,\n            yMax: 2.5, //    the percentage of the y axis in integer precentage\n            currentPayout: 1, //  current position\n            currentTick: 0,\n            testPoints: [\n                [0, 0], //  at zero seconds the payout is 1\n                [0.1, 0.01],\n            ],\n            wagers: [], // a list of wagers for the current session\n            lastPayout: 1.43,\n            coins: coins,\n            payoutHistory: [],\n            roundStart: new Date().getTime(),\n            timeReaming: 0,\n            crashed: false,\n            nextRoundWager: {},\n            currentWager: {},\n            autoBetParameter: {\n                //  for setting up the auto betting\n                enabled: false, //  an in bot browser\n                baseValue: 0,\n                cashoutValue: 0,\n                totalBets: 0,\n                onWin: 0,\n                onWinIncrease: true,\n                onLoss: 0,\n                onLossIncrease: true,\n                stopAtProfit: 0,\n                stopAtLost: 0,\n            },\n            autoBetCounters: {\n                totalBets: 0, //  how many auto bets\n                wagerSum: 0, //  total auto bet win sum\n            },\n            waitingForNextRound: false,\n            selectedCurrency: {\n                name: 'BETA',\n                image: 'betacoin.png',\n                ammount: 3245.32,\n            },\n            notificationCenterMessage: [],\n        };\n        this.inializeConnection();\n    }\n\n    async inializeConnection() {\n        //  connect socket to the server\n        var _this = this;\n        _this.startGameLoop();\n        return;\n    }\n\n    // this will add a notification center message\n    addNotificationCenterMessage(messageObject) {\n        //  add it to the list\n        var { notificationCenterMessage } = this.state;\n        notificationCenterMessage.unshift({\n            dissmissMessage: () => {\n                //  when this function is called\n                //  the message will be removed from the\n                //  notification center\n                console.log(messageObject);\n                messageObject.dismissed = true;\n\n                this.setState({});\n            },\n            message: messageObject,\n        });\n\n        this.setState({\n            notificationCenterMessage: notificationCenterMessage,\n        });\n    }\n\n    //  master loop for boost game\n    startGameLoop() {\n        var currentTick = this.state.currentTick + 16;\n        var _this = this;\n        var currentPayout =\n            Math.round((this.getPayoutAtTick(currentTick) + 1) * 100) / 100;\n        //console.log(currentTick)\n        //  if we hit this we restart just for testing\n        if (\n            this.state.testPoints[this.state.testPoints.length - 1][1] <\n            this.state.lastPayout\n        ) {\n            var testPoints = this.state.testPoints;\n            let lastTestPoint =\n                this.state.testPoints[this.state.testPoints.length - 1];\n            //console.log(this.getPayoutAtTick(currentTick),lastTestPoint[1] )\n            //  if there is a % change from last time so we dont do alot of updates\n            // if(this.getPayoutAtTick(currentTick) > lastTestPoint[1]){\n            //     testPoints.push(\n            //         [\n            //             currentTick ,\n            //             this.getPayoutAtTick(currentTick)\n            //         ]\n            //     );\n            // }else{\n            //     this.state.testPoints[this.state.testPoints.length-1][0] = currentTick\n            // }\n            testPoints.push([currentTick, this.getPayoutAtTick(currentTick)]);\n\n            //  do a max y calculation\n            var yMax = this.state.yMax;\n            if (currentPayout > 2.2) {\n                yMax = currentPayout + 0.3;\n            }\n\n            // so some checks to see if some bots need to pull out\n            const wagers = [...this.state.wagers];\n            for (const wager of wagers) {\n                if (\n                    wager.bot &&\n                    wager.pull_out < currentPayout * 100 &&\n                    !wager.cashout\n                ) {\n                    // get the bot out of there lol\n                    this.cashoutBot(wager);\n                }\n            }\n\n            // check my wager for auto cashout and cash it out\n\n            this.setState({\n                testPoints: testPoints,\n                xMax:\n                    this.state.testPoints[this.state.testPoints.length - 1][0] /\n                    1000,\n                currentTick: currentTick,\n                currentPayout: currentPayout,\n                yMax: yMax,\n                wagers,\n            });\n            setTimeout(() => {\n                _this.startGameLoop();\n            }, 16);\n        } else {\n            console.log('done');\n            //  we reset and then start the loop\n            let payoutHistory = this.state.payoutHistory;\n            payoutHistory.unshift(this.state.currentPayout);\n            _this.setState({\n                crashed: true,\n                payoutHistory: payoutHistory,\n            });\n\n            this.endBoostRound();\n        }\n    }\n    endBoostRound() {\n        var _this = this;\n        setTimeout(() => {\n            this.setState({\n                roundStart: new Date().getTime() + 7500, //  to seconds from now\n                wagers: [],\n                currentWager: {},\n                waitingForNextRound: true,\n            });\n            _this.roundPreperationLoop();\n        }, 3000);\n    }\n\n    roundPreperationLoop() {\n        var _this = this;\n        //  should run until the next round start then\n        //  hand it over to the game loop\n        if (this.state.roundStart < new Date().getTime()) {\n            //   the round starts\n            this.setState({\n                xMax: 6, // time in seconds of the x axies\n                yMax: 2.5, //    the percentage of the y axis in integer precentage\n                currentPayout: 1, //  current position\n                testPoints: [\n                    [0, 0], //  at zero seconds the payout is 1\n                    [0.1, 0.01],\n                ],\n                lastPayout: Math.random() * 10,\n                timeReaming: 0,\n                currentTick: 0,\n                crashed: false,\n                waitingForNextRound: false,\n            });\n            setTimeout(() => {\n                _this.startGameLoop();\n            }, 16);\n        } else {\n            // we should place random \"bot bets\"\n            if (this.state.timeReaming % 10 == 0) {\n                this.submitBotWager(100, 200);\n            }\n\n            //  if there is a wager then we can submit it\n            if (this.state.nextRoundWager.value) {\n                //  lock it in as my wager for\n                //  the round\n                this.submitWager(\n                    this.state.nextRoundWager.value,\n                    this.state.nextRoundWager.autoCashout\n                );\n                this.setState({\n                    nextRoundWager: {},\n                });\n            } else if (this.state.autoBetParameter.enabled) {\n                //  if the auto bet is enabled we should submit the\n                //  wager and then incriment the paraments\n            }\n\n            _this.setState({\n                timeReaming: this.state.roundStart - new Date().getTime(),\n            });\n            setTimeout(() => {\n                _this.roundPreperationLoop();\n            }, 0);\n        }\n    }\n\n    //  function to get the formula at a point\n    getPayoutAtTick(t) {\n        //  this is a peice wise function that will return a 2 decimal\n        //  value for the payout at that time\n        if (t < 10472) {\n            //  all the value is less than 10 seconds\n            //  for this one its just a linear function\n            let y = (t / 1000) * 0.2; //    its just a constat\n\n            return y;\n        } else {\n            //  here we have a devently shallow parabolic that will go up\n            //  and interesects with the function above\n            let y = Math.pow(t / 1000 + 4, 2) / 100;\n\n            return y;\n        }\n    }\n\n    placeManualBet(betAmmount, autoCashout) {\n        console.log(betAmmount, autoCashout);\n        //  there are 2 time to palce bet,\n        if (this.state.roundStart > new Date().getTime()) {\n            //  1 is when we are in the interound stage and when placed cannot cancle\n            this.submitWager(betAmmount, autoCashout);\n        } else {\n            //  2 when we are in the round and we can cancel our bet until the intersage\n            this.setState({\n                nextRoundWager: {\n                    name: 'test account',\n                    value: betAmmount,\n                    autoCashout: autoCashout,\n                    currenty: this.state.selectedCurrency,\n                },\n            });\n        }\n    }\n\n    cashout() {\n        //  cashout this is just for me but i will need to change it\n        //  later with the server\n\n        let myWager = this.state.currentWager;\n        myWager.cashout = this.state.currentTick;\n        myWager.payout = this.state.currentPayout;\n\n        this.setState({\n            currentWager: myWager,\n        });\n        this.addNotificationCenterMessage({\n            message:\n                myWager.name +\n                ' cashed out at $' +\n                parseFloat(myWager.value) * this.state.currentPayout +\n                '!',\n            image: myWager.currency.image,\n        });\n    }\n\n    cashoutBot(bot_wager) {\n        console.log('payed out bot', bot_wager);\n        bot_wager.cashout = this.state.currentTick.toString();\n        bot_wager.payout = this.state.currentPayout.toString();\n        this.addNotificationCenterMessage({\n            message:\n                bot_wager.name +\n                ' cashed out at $' +\n                parseFloat(bot_wager.value) * this.state.currentPayout +\n                '!',\n            image: bot_wager.currency.image,\n        });\n    }\n\n    submitWager(betAmmount, autoCashout) {\n        // so we will submit it (future to the server)\n        let wagers = this.state.wagers;\n        let wager = {\n            name: internet.userName(),\n            value: betAmmount,\n            autoCashout: autoCashout,\n            currency: this.state.selectedCurrency,\n        };\n        wagers.push(wager);\n        console.log(wagers);\n\n        this.setState({\n            wagers: wagers,\n            currentWager: wager,\n        });\n    }\n    submitBotWager(betAmmount, autoCashout) {\n        // so we will submit it (future to the server)\n\n        let wagers = this.state.wagers;\n        let wager = {\n            name: internet.userName(),\n            value: Math.floor(\n                Math.abs(Math.random() - Math.random()) * (1 + 300.25 - 1.25) +\n                    1.25\n            ).toString(),\n            autoCashout: autoCashout,\n            currency: coins[Math.floor(Math.random() * coins.length)],\n            pull_out: Math.floor(\n                Math.abs(Math.random() - Math.random()) * (1 + 3000 - 100.01) +\n                    100.01\n            ),\n            bot: true,\n        };\n        wagers.push(wager);\n        console.log(wagers);\n\n        this.setState({\n            wagers: wagers,\n        });\n    }\n\n    cancelWager() {\n        console.log('cancleing wager');\n        this.setState({\n            nextRoundWager: {},\n        });\n    }\n\n    render() {\n        const {\n            wagers,\n            currentWager,\n            nextRoundWager,\n            xMin,\n            yMax,\n            timeReaming,\n            crashed,\n            testPoints,\n            currentPayout,\n            payoutHistory,\n            currentTick,\n            waitingForNextRound,\n            selectedCurrency,\n        } = this.state;\n        var _this = this;\n        //  get the last point\n        let boostGameWindow = (\n            <div class=\"boost-game-wrapper\">\n                <div class=\"boost-game-top-wrapper\">\n                    <div class=\"boost-graph-wrapper\">\n                        <BoostLine\n                            testPoints={testPoints}\n                            xMax={currentTick / 1000}\n                            xMin={xMin}\n                            yMax={yMax}\n                            wagers={wagers}\n                        />\n                        <BoostRocket\n                            testPoints={testPoints}\n                            xMax={currentTick / 1000}\n                            crashed={crashed}\n                            yMax={yMax}\n                            xMin={xMin}\n                        />\n                        <BoostPayoutNumber\n                            crashed={crashed}\n                            currentPayout={currentPayout}\n                            wager={currentWager}\n                        />\n                    </div>\n\n                    <BoostXaxis xMax={currentTick / 1000} xMin={xMin} />\n                </div>\n                <div id=\"y-axis\" class=\"boost-game-bottom-wrapper\">\n                    <div class=\"boost-y-axis-wrapper\">\n                        <BoostYaxis yMax={yMax} step={0.1} />\n                    </div>\n                </div>\n            </div>\n        );\n        //  if the next round hasnt started yet\n        if (this.state.roundStart > new Date().getTime()) {\n            boostGameWindow = (\n                <RoundPreStart\n                    timeRemaining={(timeReaming / 1000).toFixed(2)}\n                />\n            );\n        }\n        //console.log(wagers)\n        return (\n            <>\n                <div className=\"boost-wrapper shadow-lg\">\n                    <div className=\"boost-header-wrapper\">\n                        <Header>\n                            <WalletDropDown\n                                coins={this.state.coins}\n                                selectCurrency={(currency) => {\n                                    this.setState({\n                                        selectedCurrency: currency,\n                                    });\n                                }}\n                                selectedCurrency={selectedCurrency}\n                            />\n                        </Header>\n                    </div>\n                    <div className=\"boost-main-wrapper\">\n                        <div className=\"boost-session-wrapper\">\n                            <div style={{ marginRight: '   0rem' }}>\n                                <BettingPannel\n                                    crashed={crashed}\n                                    wagers={wagers}\n                                    nextRoundWager={nextRoundWager}\n                                    currentWager={currentWager}\n                                    currentPayout={currentPayout}\n                                    //  for the notification center\n                                    logMessage={(message) => {\n                                        // _this.addNotificationCenterMessage(message);\n                                        console.log(message.title);\n                                    }}\n                                    //  will let us kknow if we are in the intersage\n                                    waitingForNextRound={waitingForNextRound}\n                                    placeManualBet={(betAmmount, cashout) => {\n                                        //\n                                        _this.placeManualBet(\n                                            betAmmount,\n                                            cashout\n                                        );\n                                    }}\n                                    cashout={() => {\n                                        _this.cashout();\n                                    }}\n                                    cancelBet={() => {\n                                        _this.cancelWager();\n                                    }}\n                                />\n                            </div>\n                            {boostGameWindow}\n                        </div>\n                    </div>\n                    <div className=\"boost-footer-wrapper\">\n                        <Footer>\n                            <HistoryBar payoutHistory={payoutHistory} />\n                        </Footer>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        padding: '1rem',\n                        maxHeight: '500px',\n                        overflowY: 'scroll',\n                    }}\n                >\n                    {this.state.notificationCenterMessage.map((x) => (\n                        <div\n                            style={{\n                                padding: '0.5rem',\n                                display: 'flex',\n                                alignItems: 'center',\n                            }}\n                        >\n                            <img\n                                style={{\n                                    height: '18px',\n                                    width: '18px',\n                                    marginRight: '1rem',\n                                }}\n                                src={require('./icons/' + x.message.image)}\n                            />\n                            {x.message.message}\n                        </div>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default BoostGameBase;\n","import React from 'react';\n \nimport './App.css';\n \n\n \nimport BoostGame from './components/boostGame'\nfunction App() {\n    return (\n          <BoostGame />\n           \n \n       \n    );\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <App /> \n  \n  \n  , document.getElementById('boost_game_container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bank.f306cda7.svg\";","module.exports = __webpack_public_path__ + \"static/media/BAT.8ebed5e7.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bitcoin.d7876d48.svg\";","module.exports = __webpack_public_path__ + \"static/media/XRP.d47fb469.svg\";","module.exports = __webpack_public_path__ + \"static/media/betacoin.22a9cab5.png\";","module.exports = __webpack_public_path__ + \"static/media/betacoin1.32f9a94e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dogecoin.605642c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/eos.81713350.svg\";","module.exports = __webpack_public_path__ + \"static/media/ethereum.18708d3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/isk.804ad7d2.png\";","module.exports = __webpack_public_path__ + \"static/media/litecoin.c151518b.svg\";","module.exports = __webpack_public_path__ + \"static/media/monero.f9caaf1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/information-dark.19072fe2.svg\";"],"sourceRoot":""}